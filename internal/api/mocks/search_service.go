// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	context "context"

	search "github.com/odpf/stencil/core/search"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// SearchService is an autogenerated mock type for the SearchService type
type SearchService struct {
	mock.Mock
}

// Search provides a mock function with given fields: ctx, req
func (_m *SearchService) Search(ctx context.Context, req *search.SearchRequest) (*search.SearchResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *search.SearchResponse
	if rf, ok := ret.Get(0).(func(context.Context, *search.SearchRequest) *search.SearchResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*search.SearchResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *search.SearchRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSearchService creates a new instance of SearchService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewSearchService(t testing.TB) *SearchService {
	mock := &SearchService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
