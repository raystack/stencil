"use strict";(self.webpackChunkstencil=self.webpackChunkstencil||[]).push([[556],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),c=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,h=m["".concat(o,".").concat(d)]||m[d]||p[d]||s;return n?a.createElement(h,l(l({ref:t},u),{},{components:n})):a.createElement(h,l({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,l=new Array(s);l[0]=m;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var c=2;c<s;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8215:function(e,t,n){n.d(t,{Z:function(){return r}});var a=n(7294);function r(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},9877:function(e,t,n){n.d(t,{Z:function(){return u}});var a=n(7462),r=n(7294),s=n(2389),l=n(3725),i=n(6010),o="tabItem_LplD";function c(e){var t,n,s,c=e.lazy,u=e.block,p=e.defaultValue,m=e.values,d=e.groupId,h=e.className,v=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=m?m:v.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),b=(0,l.lx)(f,(function(e,t){return e.value===t.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var k=null===p?p:null!=(t=null!=p?p:null==(n=v.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(s=v[0])?void 0:s.props.value;if(null!==k&&!f.some((function(e){return e.value===k})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+f.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var g=(0,l.UB)(),y=g.tabGroupChoices,T=g.setTabGroupChoices,N=(0,r.useState)(k),O=N[0],x=N[1],w=[],C=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=d){var q=y[d];null!=q&&q!==O&&f.some((function(e){return e.value===q}))&&x(q)}var E=function(e){var t=e.currentTarget,n=w.indexOf(t),a=f[n].value;a!==O&&(C(t),x(a),null!=d&&T(d,a))},I=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=w.indexOf(e.currentTarget)+1;n=w[a]||w[0];break;case"ArrowLeft":var r=w.indexOf(e.currentTarget)-1;n=w[r]||w[w.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":u},h)},f.map((function(e){var t=e.value,n=e.label,s=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:O===t?0:-1,"aria-selected":O===t,key:t,ref:function(e){return w.push(e)},onKeyDown:I,onFocus:E,onClick:E},s,{className:(0,i.Z)("tabs__item",o,null==s?void 0:s.className,{"tabs__item--active":O===t})}),null!=n?n:t)}))),c?(0,r.cloneElement)(v.filter((function(e){return e.props.value===O}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},v.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==O})}))))}function u(e){var t=(0,s.Z)();return r.createElement(c,(0,a.Z)({key:String(t)},e))}},8062:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return u},default:function(){return v},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return d}});var a=n(7462),r=n(3366),s=(n(7294),n(3905)),l=n(9877),i=n(8215),o=["components"],c={},u="Quickstart",p={unversionedId:"guides/quickstart",id:"guides/quickstart",title:"Quickstart",description:"This quick start will explore how to use Stencil command line interface and client libraries inside your application code. As part of this quick start we will start stencil server, create schema and then use stencil clients to serialise and deserialise data using registered schemas.",source:"@site/docs/guides/1_quickstart.md",sourceDirName:"guides",slug:"/guides/quickstart",permalink:"/stencil/docs/guides/quickstart",editUrl:"https://github.com/raystack/stencil/edit/master/docs/docs/guides/1_quickstart.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Introduction",permalink:"/stencil/docs/guides/introduction"},next:{title:"Manage namespaces",permalink:"/stencil/docs/guides/manage_namespace"}},m={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Start server",id:"step-1-start-server",level:2},{value:"Step 2: Create schema",id:"step-2-create-schema",level:2},{value:"Step 3: Upload to server",id:"step-3-upload-to-server",level:2},{value:"Step 4: Using client",id:"step-4-using-client",level:2}],h={toc:d};function v(e){var t=e.components,n=(0,r.Z)(e,o);return(0,s.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"quickstart"},"Quickstart"),(0,s.kt)("p",null,"This quick start will explore how to use Stencil command line interface and client libraries inside your application code. As part of this quick start we will start stencil server, create schema and then use stencil clients to serialise and deserialise data using registered schemas."),(0,s.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"../installation#using-docker-image"},"Docker")," or a ",(0,s.kt)("a",{parentName:"li",href:"../installation#binary-cross-platform"},"local installation")," of the Stencil binary."),(0,s.kt)("li",{parentName:"ul"},"A development environment applicable to one of the languages in this quick start (currently Go, Java, and JavaScript)."),(0,s.kt)("li",{parentName:"ul"},"Postgres database and ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/protocolbuffers/protobuf#protocol-compiler-installation"},"protoc")," if your schema format is protobuf.")),(0,s.kt)("h2",{id:"step-1-start-server"},"Step 1: Start server"),(0,s.kt)(l.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"executable",label:"Executable",default:!0,mdxType:"TabItem"},(0,s.kt)("p",null,"Run stencil server locally using installed stencil binary.\nNote: Below command assumes ",(0,s.kt)("inlineCode",{parentName:"p"},"stencil_dev")," db present in your postgres instance."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"$ export DB_CONNECTIONSTRING=postgres://postgres@localhost:5432/stencil_dev?sslmode=disable\n\n# Run database migrations\n$ stencil server migrate\n\n# Stencil server\n$ stencil server start\n\n# Check if server running\n$ curl -X GET http://localhost:8080/ping\n"))),(0,s.kt)(i.Z,{value:"docker",label:"Docker",mdxType:"TabItem"},(0,s.kt)("p",null,"Run stencil server locally using docker\nNote: Below command assumes ",(0,s.kt)("inlineCode",{parentName:"p"},"stencil_dev")," db present in your postgres instance."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"# Run database migrations\n$ docker run -e PORT=8000 -e DB_CONNECTIONSTRING=postgres://postgres@host.docker.internal:5432/stencil_dev?sslmode=disable -p 8000:8000 raystack/stencil server migrate\n\n# Stencil server at port 8000\n$ docker run -e PORT=8000 -e DB_CONNECTIONSTRING=postgres://postgres@host.docker.internal:5432/stencil_dev?sslmode=disable -p 8000:8000 raystack/stencil server start\n\n# Check if server running\n$ curl -X GET http://localhost:8000/ping\n")))),(0,s.kt)("h2",{id:"step-2-create-schema"},"Step 2: Create schema"),(0,s.kt)(l.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"protobuf",label:"Protobuf",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'$ mkdir example\n$ cd example\n\n# Create a sample proto schema.\n$ echo "syntax=\\"proto3\\";\n  package stencil;\n  message One {\n    int32 field_one = 1;\n  }" > schema.proto\n\n# Create proto descriptor file\n$ protoc --descriptor_set_out=./schema.desc --include_imports ./**/*.proto\n'))),(0,s.kt)(i.Z,{value:"avro",label:"Avro",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'$ mkdir example\n$ cd example\n\n# Create a sample avro schema.\n$ echo "{\n   \\"type\\" : \\"record\\",\n   \\"namespace\\" : \\"Tutorialspoint\\",\n   \\"name\\" : \\"Employee\\",\n   \\"fields\\" : [\n      { \\"name\\" : \\"Name\\" , \\"type\\" : \\"string\\" },\n      { \\"name\\" : \\"Age\\" , \\"type\\" : \\"int\\" }\n   ]\n}" > schema.json\n\n'))),(0,s.kt)(i.Z,{value:"json",label:"JSON",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'$ mkdir example\n$ cd example\n\n# Create example JSON schema file.\n$ echo "{\n  \\"type\\":\\"object\\",\n  \\"properties\\":{\n    \\"f1\\":{\n      \\"type\\":\\"string\\"\n      }\n    },\n  \\"additionalProperties\\": false\n}" > schema.json\n\n')))),(0,s.kt)("h2",{id:"step-3-upload-to-server"},"Step 3: Upload to server"),(0,s.kt)(l.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"cli",label:"CLI",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'# Create namespace named "quickstart" with backward compatibility enabled\n$ stencil namespace create quickstart -c COMPATIBILITY_BACKWARD -f FORMAT_PROTOBUF -d "For quickstart guide" --host http://localhost:8000\n\n# List namespaces\n$ stencil namespace list --host http://localhost:8000\n\n# Upload generated schema proto descriptor file to server with schema name as `example` under `quickstart` namespace.\n$ stencil schema create example --namespace=quickstart \u2013-filePath=schema.desc\n\n# Get list of schemas available in a namespace\n$ stencil schema list --host http://localhost:8000\n\n# Get list of versions available for particular schema. These versions are auto generated.\n# Version numbers managed by stencil.\n$ stencil schema version example -n quickstart  --host http://localhost:8000\n\n# Download specific version of particular schema\n$ stencil schema get example --version 1 --host http://localhost:8000\n\n# Download latest version of particular schema\n$ stencil schema get example  -n quickstart --host http://localhost:8000\n'))),(0,s.kt)(i.Z,{value:"api",label:"API",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'# Create namespace named "quickstart" with backward compatibility enabled\n$ curl -X POST http://localhost:8000/v1beta1/namespaces -H \'Content-Type: application/json\' -d \'{"id": "quickstart", "format": "FORMAT_PROTOBUF", "compatibility": "COMPATIBILITY_BACKWARD", "description": "For quickstart guide"}\'\n\n# List namespaces\n$ curl http://localhost:8000/v1beta1/namespaces\n\n# Upload generated schema proto descriptor file to server with schema name as `example` under `quickstart` namespace.\n$ curl -X POST http://localhost:8000/v1beta1/namespaces/quickstart/schemas/example --data-binary "@schema.desc"\n\n# Get list of schemas available in a namespace\n$ curl -X GET http://localhost:8000/v1beta1/namespaces/quickstart/schemas\n\n# Get list of versions available for particular schema. These versions are auto generated.\n# Version numbers managed by stencil.\n$ curl -X GET http://localhost:8000/v1beta1/namespaces/quickstart/schemas/example/versions\n\n# Download specific version of particular schema\n$ curl -X GET http://localhost:8000/v1beta1/namespaces/quickstart/schemas/example/versions/1\n\n# Download latest version of particular schema\n$ curl -X GET http://localhost:8000/v1beta1/namespaces/quickstart/schemas/example;\n')))),(0,s.kt)("h2",{id:"step-4-using-client"},"Step 4: Using client"),(0,s.kt)("p",null,"Let's use this API in our GO client"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n       "log"\n       stencil "github.com/raystack/stencil/clients/go"\n)\n\nfunc main() {\n    url := "http://localhost:8000/v1/namespaces/quickstart/descriptors/example/versions/latest"\n    client, err := stencil.NewClient([]string{url}, stencil.Options{})\n    if err != nil {\n      log.Fatal("Unable to create client", err)\n      return\n    }\n    desc, err := client.GetDescriptor("stencil.One")\n    // ...\n}\n')))}v.isMDXComponent=!0}}]);