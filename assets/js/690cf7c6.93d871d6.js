"use strict";(self.webpackChunkstencil=self.webpackChunkstencil||[]).push([[614],{3905:function(e,t,a){a.d(t,{Zo:function(){return s},kt:function(){return c}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),m=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},s=function(e){var t=m(e.components);return n.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=m(a),c=r,k=u["".concat(p,".").concat(c)]||u[c]||d[c]||l;return a?n.createElement(k,i(i({ref:t},s),{},{components:a})):n.createElement(k,i({ref:t},s))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var m=2;m<l;m++)i[m]=a[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},1364:function(e,t,a){a.r(t),a.d(t,{assets:function(){return s},contentTitle:function(){return p},default:function(){return c},frontMatter:function(){return o},metadata:function(){return m},toc:function(){return d}});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),i=["components"],o={},p="Clojure",m={unversionedId:"clients/clojure",id:"clients/clojure",title:"Clojure",description:"A Clojure library designed to easily encode and decode protobuf messages by using Clojure maps.",source:"@site/docs/clients/clojure.md",sourceDirName:"clients",slug:"/clients/clojure",permalink:"/stencil/docs/clients/clojure",editUrl:"https://github.com/raystack/stencil/edit/master/docs/docs/clients/clojure.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Java",permalink:"/stencil/docs/clients/java"},next:{title:"JavaScript",permalink:"/stencil/docs/clients/js"}},s={},d=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Protocol buffers - Clojure interop",id:"protocol-buffers---clojure-interop",level:2},{value:"API",id:"api",level:2},{value:"Development",id:"development",level:2}],u={toc:d};function c(e){var t=e.components,a=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"clojure"},"Clojure"),(0,l.kt)("p",null,"A Clojure library designed to easily encode and decode protobuf messages by using Clojure maps."),(0,l.kt)("h2",{id:"installation"},"Installation"),(0,l.kt)("p",null,"Add the below dependency to your ",(0,l.kt)("inlineCode",{parentName:"p"},"project.clj")," file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-clj"},'[org.raystack/stencil-clj "0.4.0"]\n')),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("p",null,"Consider following proto message"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-proto"},'syntax = "proto3";\n\npackage example;\n\noption java_multiple_files = true;\noption java_package = "org.raystack.CljTest";\n\nmessage Address {\n    string city = 1;\n    string street = 2;\n}\n\nmessage Person {\n    enum Gender {\n        UNKNOWN = 0;\n        MALE = 1;\n        FEMALE = 2;\n        NON_BINARY = 3;\n    }\n    string name = 1;\n    Address address = 2;\n    Gender gender = 3;\n    repeated string email_list = 4;\n    int32 age = 5;\n}\n')),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Create stencil client. You can refer to ",(0,l.kt)("a",{parentName:"li",href:"java"},"java client")," documentation for all available options.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-clojure"},'(ns test\n  (:require [stencil.core :refer [create-client]]))\n\n(def client (create-client {:url "<stencil service url>"\n                :refresh-cache true\n                :refresh-strategy :version-based-refresh\n                :headers {"<headerkey>" "<header value>"}))\n')),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"To serialize data from clojure map")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-clojure"},'(:require [stencil.core :refer [serialize]])\n\n(def serialized-data\n     (serialize client "org.raystack.CljTest" {:name "Foo"\n                                          :address {:street "bar"}\n                                          :email-list ["a@example.com" "b@b.com"]\n                                          :gender :NON-BINARY\n                                          :age 10}))\n')),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"Deserialize data from bytes to clojure map")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-clojure"},'(:require [stencil.core :refer [deserialize]])\n\n(deserialize client "org.raystack.CljTest" serialized-data)\n;; prints\n;; {:name "Foo"\n;; :address {:street "bar"}\n;; :email-list ["a@example.com" "b@b.com"]\n;; :gender :NON-BINARY\n;; :age 10}\n')),(0,l.kt)("h2",{id:"protocol-buffers---clojure-interop"},"Protocol buffers - Clojure interop"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Protobuf"),(0,l.kt)("th",{parentName:"tr",align:null},"Clojure"),(0,l.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"field names"),(0,l.kt)("td",{parentName:"tr",align:null},"keywords in kebab case"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"name")," -> ",(0,l.kt)("inlineCode",{parentName:"td"},":name"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"field_name")," -> ",(0,l.kt)("inlineCode",{parentName:"td"},":field-name"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"scalar fields"),(0,l.kt)("td",{parentName:"tr",align:null},"Values follow ",(0,l.kt)("a",{parentName:"td",href:"https://developers.google.com/protocol-buffers/docs/proto3#scalar"},"protobuf-java scalar value mappings")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"enums"),(0,l.kt)("td",{parentName:"tr",align:null},"Values converted as keywords of enum's original value"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UNKNOWN")," -> ",(0,l.kt)("inlineCode",{parentName:"td"},":UNKNOWN"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"messages"),(0,l.kt)("td",{parentName:"tr",align:null},"clojure map"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"message Hello {string name = 1;}"),' -> {:name "raystack"}')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"repeated fields"),(0,l.kt)("td",{parentName:"tr",align:null},"clojure vector"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"one-of fields"),(0,l.kt)("td",{parentName:"tr",align:null},"treated as regular fields"),(0,l.kt)("td",{parentName:"tr",align:null},"if two fields are set that are part of one-of, last seen value is considered while serializing data")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"map"),(0,l.kt)("td",{parentName:"tr",align:null},"map values follow it's ",(0,l.kt)("a",{parentName:"td",href:"https://developers.google.com/protocol-buffers/docs/proto3#backwards_compatibility"},"wire representation")),(0,l.kt)("td",{parentName:"tr",align:null},"for ",(0,l.kt)("inlineCode",{parentName:"td"},"map<string, string>")," type, example value will be ",(0,l.kt)("inlineCode",{parentName:"td"},'[{:key "key" :value "value"}]'))))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Note on errors:"),"\nSerialize will throw error in following cases"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"unknown field is passed that's not present in schema ",(0,l.kt)("inlineCode",{parentName:"li"},"{:cause :unknown-field :info {:field-name <field-name>}}")),(0,l.kt)("li",{parentName:"ol"},"if non-collection type is passed to repeated field ",(0,l.kt)("inlineCode",{parentName:"li"},"{:cause :not-a-collection :info {:value <value>}}")),(0,l.kt)("li",{parentName:"ol"},"If unknown enum value passed that's not present in schema ",(0,l.kt)("inlineCode",{parentName:"li"},"{:cause :unknown-enum-value :info {:field-name <field-name>}}"))),(0,l.kt)("h2",{id:"api"},"API"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"create-client (client-config)")),(0,l.kt)("p",{parentName:"li"},"Returns a new Stencil Clojure client instance by passing client-config."),(0,l.kt)("h3",{parentName:"li",id:"client-config-structure-"},"Client config structure :"),(0,l.kt)("table",{parentName:"li"},(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"url")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},"Stencil url to fetch latest descriptor sets")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"refresh-cache")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"Boolean")),(0,l.kt)("td",{parentName:"tr",align:null},"Whether the cache should be refreshed or not")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"refresh-ttl")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"Integer")),(0,l.kt)("td",{parentName:"tr",align:null},"Cache TTL in minutes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"request-timeout")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"Integer")),(0,l.kt)("td",{parentName:"tr",align:null},"Request timeout in milliseconds")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"request-backoff-time")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"Integer")),(0,l.kt)("td",{parentName:"tr",align:null},"Request back off time in minutes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"retry-count")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"Integer")),(0,l.kt)("td",{parentName:"tr",align:null},"Number of retries to be made to fetch descriptor sets")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"headers")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"Map")),(0,l.kt)("td",{parentName:"tr",align:null},"Map with key as header key and value as header value, which will be passed to stencil server")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"refresh-strategy")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"keyword")),(0,l.kt)("td",{parentName:"tr",align:null},"Possible values :version-based-refresh, :long-polling-refresh. Default :long-polling-refresh")))),(0,l.kt)("p",{parentName:"li"},"Example:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-clojure"},' (let [sample-client-config {:url       "https://example-url"\n                            :refresh-cache        true\n                            :refresh-ttl          100\n                            :request-timeout      10000\n                            :request-backoff-time 100\n                            :retry-count          3\n                            :headers              {"Authorization" "Bearer <token>"}\n                            :refresh-strategy     :version-based-refresh\n                            }]\n       (create-client sample-client-config))\n'))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"get-descriptor (client proto-class-name)")),(0,l.kt)("p",{parentName:"li"},"Returns protobuf descriptor object for the given protobuf class name."),(0,l.kt)("h3",{parentName:"li",id:"argument-list-"},"Argument list :"),(0,l.kt)("table",{parentName:"li"},(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"client")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"Object")),(0,l.kt)("td",{parentName:"tr",align:null},"Instantiated Clojure client object")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"proto-class-name")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the proto class whose proto descriptor object is required")))),(0,l.kt)("h3",{parentName:"li",id:"response-structure"},"Response structure"),(0,l.kt)("table",{parentName:"li"},(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"proto-desc")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"Object")),(0,l.kt)("td",{parentName:"tr",align:null},"Protobuf descriptor for given proto class name")))),(0,l.kt)("p",{parentName:"li"},"Example:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-clojure"},'(let [client (create-client sample-client-config)\n      proto-package "org.raystack.stencil_clj_test"\n      proto-class-name "Scalar"\n      fully-qualified-proto-name (str proto-package "." proto-class-name)]\n    (get-descriptor client fully-qualified-proto-name))\n'))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"deserialize (client proto-class-name data)")),(0,l.kt)("p",{parentName:"li"},"Returns Clojure map for the given protobuf encoded byte array and protobuf class name."),(0,l.kt)("h3",{parentName:"li",id:"argument-list--1"},"Argument list :"),(0,l.kt)("table",{parentName:"li"},(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"client")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"Object")),(0,l.kt)("td",{parentName:"tr",align:null},"Instantiated Clojure client object")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"proto-class-name")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the proto class whose proto descriptor object is required")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"data")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"Byte-Array")),(0,l.kt)("td",{parentName:"tr",align:null},"Data (byte-array) to be deserialized using proto-descriptor object")))),(0,l.kt)("h3",{parentName:"li",id:"response-structure-1"},"Response structure"),(0,l.kt)("table",{parentName:"li"},(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"deserialized-message")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"PersistentArrayMap")),(0,l.kt)("td",{parentName:"tr",align:null},"Deserialized message (Clojure Map)")))),(0,l.kt)("p",{parentName:"li"},"Example:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-clojure"},'(let [client (create-client sample-client-config)\n      proto-package "org.raystack.stencil_clj_test"\n      proto-class-name "Scalar"\n      fully-qualified-proto-name (str proto-package "." proto-class-name)\n      proto-desc (get-descriptor client fully-qualified-proto-name)\n      data-to-deserialize (serialize client fully-qualified-proto-name{:field-one 1.25})]\n     (deserialize client fully-qualified-proto-name data-to-deserialize))\n'))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"serialize (client proto-class-name map)")),(0,l.kt)("p",{parentName:"li"},"Returns protobuf encoded byte array for the given Clojure and protobuf class name."),(0,l.kt)("h3",{parentName:"li",id:"argument-list--2"},"Argument list :"),(0,l.kt)("table",{parentName:"li"},(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"client")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"Object")),(0,l.kt)("td",{parentName:"tr",align:null},"Instantiated Clojure client object")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"proto-class-name")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the proto class whose proto descriptor object is required")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"map")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"PersistentArrayMap")),(0,l.kt)("td",{parentName:"tr",align:null},"Data (in the form of map) to be serialized using proto descriptor object")))),(0,l.kt)("h3",{parentName:"li",id:"response-structure-2"},"Response structure"),(0,l.kt)("table",{parentName:"li"},(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"serialized-message")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"Byte-Array")),(0,l.kt)("td",{parentName:"tr",align:null},"Serialized message (byte-array)")))),(0,l.kt)("p",{parentName:"li"},"Example:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-clojure"},'(let [client (create-client sample-client-config)\n      proto-package "org.raystack.stencil_clj_test"\n      proto-class-name "Scalar"\n      fully-qualified-proto-name (str proto-package "." proto-class-name)\n      proto-desc (get-descriptor client fully-qualified-proto-name)]\n     (serialize client fully-qualified-proto-name {:field-one 1.25}))\n')))),(0,l.kt)("h2",{id:"development"},"Development"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Ensure ",(0,l.kt)("a",{parentName:"p",href:"https://leiningen.org/"},"leiningen")," is installed.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Run tests: ",(0,l.kt)("inlineCode",{parentName:"p"},"lein clean && lein javac && lein test"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Run formatting: ",(0,l.kt)("inlineCode",{parentName:"p"},"lein cljfmt fix")))))}c.isMDXComponent=!0}}]);