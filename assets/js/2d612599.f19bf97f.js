"use strict";(self.webpackChunkstencil=self.webpackChunkstencil||[]).push([[93],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||l;return n?r.createElement(f,a(a({ref:t},p),{},{components:n})):r.createElement(f,a({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,a=new Array(l);a[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var c=2;c<l;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3839:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return u}});var r=n(7462),o=n(3366),l=(n(7294),n(3905)),a=["components"],i={},s="JavaScript",c={unversionedId:"clients/js",id:"clients/js",title:"JavaScript",description:"Stencil nodejs client package provides a store to lookup protobuf descriptors and options to keep the protobuf descriptors upto date.",source:"@site/docs/clients/js.md",sourceDirName:"clients",slug:"/clients/js",permalink:"/stencil/docs/clients/js",editUrl:"https://github.com/raystack/stencil/edit/master/docs/docs/clients/js.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Clojure",permalink:"/stencil/docs/clients/clojure"},next:{title:"API",permalink:"/stencil/docs/reference/api"}},p={},u=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Creating a client",id:"creating-a-client",level:3},{value:"Creating a multiURLClient",id:"creating-a-multiurlclient",level:3},{value:"Get proto descriptor type",id:"get-proto-descriptor-type",level:3},{value:"Encode/Decode message",id:"encodedecode-message",level:3},{value:"Setting up development environment",id:"setting-up-development-environment",level:2},{value:"Prerequisite Tools",id:"prerequisite-tools",level:3},{value:"Versioning",id:"versioning",level:2}],d={toc:u};function m(e){var t=e.components,n=(0,o.Z)(e,a);return(0,l.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"javascript"},"JavaScript"),(0,l.kt)("p",null,"Stencil nodejs client package provides a store to lookup protobuf descriptors and options to keep the protobuf descriptors upto date."),(0,l.kt)("p",null,"It has following features"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Ability to refresh protobuf descriptors in specified intervals"),(0,l.kt)("li",{parentName:"ul"},"Support to download descriptors from multiple urls")),(0,l.kt)("h2",{id:"installation"},"Installation"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"npm install --save @raystack/stencil\n")),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("h3",{id:"creating-a-client"},"Creating a client"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'const { Stencil } = require("stencil");\n\nconst url = "http://url/to/proto/descriptorset/file";\nconst client = await Stencil.getInstance(url, {\n  shouldRefresh: true,\n  refreshInterval: 43200, // 12 hrs\n});\n')),(0,l.kt)("h3",{id:"creating-a-multiurlclient"},"Creating a multiURLClient"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'const { MultiURLStencil } = require("stencil");\n\nconst url1 = "http://url/to/proto/descriptorset/file";\nconst url2 = "http://url/to/proto/descriptorset/file2";\nconst client = await MultiURLStencil.getInstance([url1, url2], {\n  shouldRefresh: true,\n  refreshInterval: 43200, // 12 hrs\n});\n')),(0,l.kt)("h3",{id:"get-proto-descriptor-type"},"Get proto descriptor type"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'const { Stencil } = require("stencil");\n\nconst url = "http://url/to/proto/descriptorset/file";\nconst client = await Stencil.getInstance(url, {\n  shouldRefresh: false,\n});\nconst type = client.getType("google.protobuf.DescriptorProto");\n')),(0,l.kt)("h3",{id:"encodedecode-message"},"Encode/Decode message"),(0,l.kt)("p",null,"Let's say we want to encode message for below proto message defniniton"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-proto"},'syntax = "proto3";\n\npackage test;\n\nmessage One {\n  int64 field_one = 1;\n}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const { Stencil } = require('stencil');\n\nconst url = 'http://url/to/proto/descriptorset/file';\nconst client = await Stencil.getInstance(url, {\n  shouldRefresh: false\n});\nconst type = client.getType('test.One');\n// Encode\nconst msg = { field_one: 10 };\nconst errs = type.verify(msg);\nif errs {\n   throw new Error(`unable to serialize message: ${errs}`);\n}\nconst encodedBuffer = type.encode(msg).finish();\n// Decode\nconst decodedType = type.decode(encodedBuffer);\nconsole.log(decodedType.toObject())\n")),(0,l.kt)("h2",{id:"setting-up-development-environment"},"Setting up development environment"),(0,l.kt)("h3",{id:"prerequisite-tools"},"Prerequisite Tools"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://nodejs.org/"},"Node.js")," (version >= 12.0.0)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://git-scm.com/"},"Git"))),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Clone the repo"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"$ git clone https://github.com/raystack/stencil\n$ cd stencil/clients/js\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Install dependencies"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"$ npm install\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Run the tests. All of the tests are written with ",(0,l.kt)("a",{parentName:"p",href:"https://jestjs.io/"},"jest"),"."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"$ npm test\n")))),(0,l.kt)("h2",{id:"versioning"},"Versioning"),(0,l.kt)("p",null,"We use ",(0,l.kt)("a",{parentName:"p",href:"http://semver.org/"},"SemVer")," for versioning. For the versions available, see the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/raystack/stencil/tags"},"tags"),"."))}m.isMDXComponent=!0}}]);