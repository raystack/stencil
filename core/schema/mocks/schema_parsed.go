// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	schema "github.com/odpf/stencil/core/schema"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// ParsedSchema is an autogenerated mock type for the ParsedSchema type
type ParsedSchema struct {
	mock.Mock
}

// Format provides a mock function with given fields:
func (_m *ParsedSchema) Format() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetCanonicalValue provides a mock function with given fields:
func (_m *ParsedSchema) GetCanonicalValue() *schema.SchemaFile {
	ret := _m.Called()

	var r0 *schema.SchemaFile
	if rf, ok := ret.Get(0).(func() *schema.SchemaFile); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schema.SchemaFile)
		}
	}

	return r0
}

// IsBackwardCompatible provides a mock function with given fields: _a0
func (_m *ParsedSchema) IsBackwardCompatible(_a0 schema.ParsedSchema) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(schema.ParsedSchema) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsForwardCompatible provides a mock function with given fields: _a0
func (_m *ParsedSchema) IsForwardCompatible(_a0 schema.ParsedSchema) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(schema.ParsedSchema) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsFullCompatible provides a mock function with given fields: _a0
func (_m *ParsedSchema) IsFullCompatible(_a0 schema.ParsedSchema) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(schema.ParsedSchema) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewParsedSchema creates a new instance of ParsedSchema. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewParsedSchema(t testing.TB) *ParsedSchema {
	mock := &ParsedSchema{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
