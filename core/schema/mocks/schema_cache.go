// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// SchemaCache is an autogenerated mock type for the Cache type
type SchemaCache struct {
	mock.Mock
}

// Get provides a mock function with given fields: _a0
func (_m *SchemaCache) Get(_a0 interface{}) (interface{}, bool) {
	ret := _m.Called(_a0)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(interface{}) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(interface{}) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Set provides a mock function with given fields: _a0, _a1, _a2
func (_m *SchemaCache) Set(_a0 interface{}, _a1 interface{}, _a2 int64) bool {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 bool
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, int64) bool); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewSchemaCache creates a new instance of SchemaCache. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewSchemaCache(t testing.TB) *SchemaCache {
	mock := &SchemaCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
