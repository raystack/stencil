// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StencilServiceClient is the client API for StencilService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StencilServiceClient interface {
	Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error)
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadResponse, error)
	List(ctx context.Context, in *ListSnapshotRequest, opts ...grpc.CallOption) (*SnapshotList, error)
	UpdateLatest(ctx context.Context, in *UpdateLatestRequest, opts ...grpc.CallOption) (*Snapshot, error)
}

type stencilServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStencilServiceClient(cc grpc.ClientConnInterface) StencilServiceClient {
	return &stencilServiceClient{cc}
}

func (c *stencilServiceClient) Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error) {
	out := new(UploadResponse)
	err := c.cc.Invoke(ctx, "/odpf.stencil.v1.StencilService/Upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stencilServiceClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadResponse, error) {
	out := new(DownloadResponse)
	err := c.cc.Invoke(ctx, "/odpf.stencil.v1.StencilService/Download", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stencilServiceClient) List(ctx context.Context, in *ListSnapshotRequest, opts ...grpc.CallOption) (*SnapshotList, error) {
	out := new(SnapshotList)
	err := c.cc.Invoke(ctx, "/odpf.stencil.v1.StencilService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stencilServiceClient) UpdateLatest(ctx context.Context, in *UpdateLatestRequest, opts ...grpc.CallOption) (*Snapshot, error) {
	out := new(Snapshot)
	err := c.cc.Invoke(ctx, "/odpf.stencil.v1.StencilService/UpdateLatest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StencilServiceServer is the server API for StencilService service.
// All implementations must embed UnimplementedStencilServiceServer
// for forward compatibility
type StencilServiceServer interface {
	Upload(context.Context, *UploadRequest) (*UploadResponse, error)
	Download(context.Context, *DownloadRequest) (*DownloadResponse, error)
	List(context.Context, *ListSnapshotRequest) (*SnapshotList, error)
	UpdateLatest(context.Context, *UpdateLatestRequest) (*Snapshot, error)
	mustEmbedUnimplementedStencilServiceServer()
}

// UnimplementedStencilServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStencilServiceServer struct {
}

func (UnimplementedStencilServiceServer) Upload(context.Context, *UploadRequest) (*UploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedStencilServiceServer) Download(context.Context, *DownloadRequest) (*DownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedStencilServiceServer) List(context.Context, *ListSnapshotRequest) (*SnapshotList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedStencilServiceServer) UpdateLatest(context.Context, *UpdateLatestRequest) (*Snapshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLatest not implemented")
}
func (UnimplementedStencilServiceServer) mustEmbedUnimplementedStencilServiceServer() {}

// UnsafeStencilServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StencilServiceServer will
// result in compilation errors.
type UnsafeStencilServiceServer interface {
	mustEmbedUnimplementedStencilServiceServer()
}

func RegisterStencilServiceServer(s grpc.ServiceRegistrar, srv StencilServiceServer) {
	s.RegisterService(&StencilService_ServiceDesc, srv)
}

func _StencilService_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StencilServiceServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.stencil.v1.StencilService/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StencilServiceServer).Upload(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StencilService_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StencilServiceServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.stencil.v1.StencilService/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StencilServiceServer).Download(ctx, req.(*DownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StencilService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StencilServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.stencil.v1.StencilService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StencilServiceServer).List(ctx, req.(*ListSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StencilService_UpdateLatest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLatestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StencilServiceServer).UpdateLatest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.stencil.v1.StencilService/UpdateLatest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StencilServiceServer).UpdateLatest(ctx, req.(*UpdateLatestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StencilService_ServiceDesc is the grpc.ServiceDesc for StencilService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StencilService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "odpf.stencil.v1.StencilService",
	HandlerType: (*StencilServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upload",
			Handler:    _StencilService_Upload_Handler,
		},
		{
			MethodName: "Download",
			Handler:    _StencilService_Download_Handler,
		},
		{
			MethodName: "List",
			Handler:    _StencilService_List_Handler,
		},
		{
			MethodName: "UpdateLatest",
			Handler:    _StencilService_UpdateLatest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "odpf/stencil/stencil.proto",
}
