// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"

	snapshot "github.com/odpf/stencil/server/snapshot"
	mock "github.com/stretchr/testify/mock"
)

// MetadataService is an autogenerated mock type for the MetadataService type
type MetadataService struct {
	mock.Mock
}

// Exists provides a mock function with given fields: _a0, _a1
func (_m *MetadataService) Exists(_a0 context.Context, _a1 *snapshot.Snapshot) bool {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *snapshot.Snapshot) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetSnapshot provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *MetadataService) GetSnapshot(_a0 context.Context, _a1 string, _a2 string, _a3 string, _a4 bool) (*snapshot.Snapshot, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 *snapshot.Snapshot
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, bool) *snapshot.Snapshot); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*snapshot.Snapshot)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, bool) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNames provides a mock function with given fields: _a0, _a1
func (_m *MetadataService) ListNames(_a0 context.Context, _a1 string) ([]string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVersions provides a mock function with given fields: _a0, _a1, _a2
func (_m *MetadataService) ListVersions(_a0 context.Context, _a1 string, _a2 string) ([]string, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []string); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLatestVersion provides a mock function with given fields: _a0, _a1
func (_m *MetadataService) UpdateLatestVersion(_a0 context.Context, _a1 *snapshot.Snapshot) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *snapshot.Snapshot) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
