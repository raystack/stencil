// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package stencilv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StencilServiceClient is the client API for StencilService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StencilServiceClient interface {
	UploadDescriptor(ctx context.Context, in *UploadDescriptorRequest, opts ...grpc.CallOption) (*UploadDescriptorResponse, error)
	DownloadDescriptor(ctx context.Context, in *DownloadDescriptorRequest, opts ...grpc.CallOption) (*DownloadDescriptorResponse, error)
	ListSnapshots(ctx context.Context, in *ListSnapshotsRequest, opts ...grpc.CallOption) (*ListSnapshotsResponse, error)
	// PromoteSnapshot promotes particular snapshot version as latest
	PromoteSnapshot(ctx context.Context, in *PromoteSnapshotRequest, opts ...grpc.CallOption) (*PromoteSnapshotResponse, error)
}

type stencilServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStencilServiceClient(cc grpc.ClientConnInterface) StencilServiceClient {
	return &stencilServiceClient{cc}
}

func (c *stencilServiceClient) UploadDescriptor(ctx context.Context, in *UploadDescriptorRequest, opts ...grpc.CallOption) (*UploadDescriptorResponse, error) {
	out := new(UploadDescriptorResponse)
	err := c.cc.Invoke(ctx, "/odpf.stencil.v1.StencilService/UploadDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stencilServiceClient) DownloadDescriptor(ctx context.Context, in *DownloadDescriptorRequest, opts ...grpc.CallOption) (*DownloadDescriptorResponse, error) {
	out := new(DownloadDescriptorResponse)
	err := c.cc.Invoke(ctx, "/odpf.stencil.v1.StencilService/DownloadDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stencilServiceClient) ListSnapshots(ctx context.Context, in *ListSnapshotsRequest, opts ...grpc.CallOption) (*ListSnapshotsResponse, error) {
	out := new(ListSnapshotsResponse)
	err := c.cc.Invoke(ctx, "/odpf.stencil.v1.StencilService/ListSnapshots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stencilServiceClient) PromoteSnapshot(ctx context.Context, in *PromoteSnapshotRequest, opts ...grpc.CallOption) (*PromoteSnapshotResponse, error) {
	out := new(PromoteSnapshotResponse)
	err := c.cc.Invoke(ctx, "/odpf.stencil.v1.StencilService/PromoteSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StencilServiceServer is the server API for StencilService service.
// All implementations must embed UnimplementedStencilServiceServer
// for forward compatibility
type StencilServiceServer interface {
	UploadDescriptor(context.Context, *UploadDescriptorRequest) (*UploadDescriptorResponse, error)
	DownloadDescriptor(context.Context, *DownloadDescriptorRequest) (*DownloadDescriptorResponse, error)
	ListSnapshots(context.Context, *ListSnapshotsRequest) (*ListSnapshotsResponse, error)
	// PromoteSnapshot promotes particular snapshot version as latest
	PromoteSnapshot(context.Context, *PromoteSnapshotRequest) (*PromoteSnapshotResponse, error)
	mustEmbedUnimplementedStencilServiceServer()
}

// UnimplementedStencilServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStencilServiceServer struct {
}

func (UnimplementedStencilServiceServer) UploadDescriptor(context.Context, *UploadDescriptorRequest) (*UploadDescriptorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadDescriptor not implemented")
}
func (UnimplementedStencilServiceServer) DownloadDescriptor(context.Context, *DownloadDescriptorRequest) (*DownloadDescriptorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadDescriptor not implemented")
}
func (UnimplementedStencilServiceServer) ListSnapshots(context.Context, *ListSnapshotsRequest) (*ListSnapshotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSnapshots not implemented")
}
func (UnimplementedStencilServiceServer) PromoteSnapshot(context.Context, *PromoteSnapshotRequest) (*PromoteSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromoteSnapshot not implemented")
}
func (UnimplementedStencilServiceServer) mustEmbedUnimplementedStencilServiceServer() {}

// UnsafeStencilServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StencilServiceServer will
// result in compilation errors.
type UnsafeStencilServiceServer interface {
	mustEmbedUnimplementedStencilServiceServer()
}

func RegisterStencilServiceServer(s grpc.ServiceRegistrar, srv StencilServiceServer) {
	s.RegisterService(&StencilService_ServiceDesc, srv)
}

func _StencilService_UploadDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadDescriptorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StencilServiceServer).UploadDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.stencil.v1.StencilService/UploadDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StencilServiceServer).UploadDescriptor(ctx, req.(*UploadDescriptorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StencilService_DownloadDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadDescriptorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StencilServiceServer).DownloadDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.stencil.v1.StencilService/DownloadDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StencilServiceServer).DownloadDescriptor(ctx, req.(*DownloadDescriptorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StencilService_ListSnapshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSnapshotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StencilServiceServer).ListSnapshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.stencil.v1.StencilService/ListSnapshots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StencilServiceServer).ListSnapshots(ctx, req.(*ListSnapshotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StencilService_PromoteSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromoteSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StencilServiceServer).PromoteSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.stencil.v1.StencilService/PromoteSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StencilServiceServer).PromoteSnapshot(ctx, req.(*PromoteSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StencilService_ServiceDesc is the grpc.ServiceDesc for StencilService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StencilService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "odpf.stencil.v1.StencilService",
	HandlerType: (*StencilServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadDescriptor",
			Handler:    _StencilService_UploadDescriptor_Handler,
		},
		{
			MethodName: "DownloadDescriptor",
			Handler:    _StencilService_DownloadDescriptor_Handler,
		},
		{
			MethodName: "ListSnapshots",
			Handler:    _StencilService_ListSnapshots_Handler,
		},
		{
			MethodName: "PromoteSnapshot",
			Handler:    _StencilService_PromoteSnapshot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "odpf/stencil/v1/stencil.proto",
}
