// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	namespace "github.com/odpf/stencil/core/namespace"
	mock "github.com/stretchr/testify/mock"
)

// NamespaceService is an autogenerated mock type for the NamespaceService type
type NamespaceService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, ns
func (_m *NamespaceService) Create(ctx context.Context, ns namespace.Namespace) (namespace.Namespace, error) {
	ret := _m.Called(ctx, ns)

	var r0 namespace.Namespace
	if rf, ok := ret.Get(0).(func(context.Context, namespace.Namespace) namespace.Namespace); ok {
		r0 = rf(ctx, ns)
	} else {
		r0 = ret.Get(0).(namespace.Namespace)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, namespace.Namespace) error); ok {
		r1 = rf(ctx, ns)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, name
func (_m *NamespaceService) Delete(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, name
func (_m *NamespaceService) Get(ctx context.Context, name string) (namespace.Namespace, error) {
	ret := _m.Called(ctx, name)

	var r0 namespace.Namespace
	if rf, ok := ret.Get(0).(func(context.Context, string) namespace.Namespace); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(namespace.Namespace)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx
func (_m *NamespaceService) List(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, ns
func (_m *NamespaceService) Update(ctx context.Context, ns namespace.Namespace) (namespace.Namespace, error) {
	ret := _m.Called(ctx, ns)

	var r0 namespace.Namespace
	if rf, ok := ret.Get(0).(func(context.Context, namespace.Namespace) namespace.Namespace); ok {
		r0 = rf(ctx, ns)
	} else {
		r0 = ret.Get(0).(namespace.Namespace)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, namespace.Namespace) error); ok {
		r1 = rf(ctx, ns)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
