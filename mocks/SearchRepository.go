// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/odpf/stencil/server/domain"
	mock "github.com/stretchr/testify/mock"
)

// SearchRepository is an autogenerated mock type for the SearchRepository type
type SearchRepository struct {
	mock.Mock
}

// GetLatestVersion provides a mock function with given fields: ctx, namespaceId, schemaName
func (_m *SearchRepository) GetLatestVersion(ctx context.Context, namespaceId string, schemaName string) (int32, error) {
	ret := _m.Called(ctx, namespaceId, schemaName)

	var r0 int32
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int32); ok {
		r0 = rf(ctx, namespaceId, schemaName)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespaceId, schemaName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: _a0, _a1
func (_m *SearchRepository) Search(_a0 context.Context, _a1 *domain.SearchRequest) ([]*domain.SearchHits, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*domain.SearchHits
	if rf, ok := ret.Get(0).(func(context.Context, *domain.SearchRequest) []*domain.SearchHits); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.SearchHits)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.SearchRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
